name: Container Security Lite (Pristine)

on:
    push:
        branches: [main, master]
    pull_request:
    workflow_dispatch:
        inputs:
            dockerfile:
                description: Path to Dockerfile
                required: false
                default: Dockerfile
            context:
                description: Build context path
                required: false
                default: .
            fail-on:
                description: Fail threshold (critical|high|medium|any|none)
                required: false
                default: critical
            notify-provider:
                description: Notification provider (slack|teams|webhook|none)
                required: false
                default: none
            notify-webhook-url:
                description: Webhook URL if provider requires it
                required: false
                default: ""

permissions:
    contents: read
    security-events: write
    actions: read

env:
    SYFT_VERSION: v1.14.0
    TRIVY_VERSION: 0.52.1
    GRYPE_VERSION: v0.76.3

jobs:
    scan:
        name: Build, SBOM, Scan, Drift
        runs-on: ubuntu-latest
        outputs:
            sev_critical: ${{ steps.sev.outputs.critical }}
            sev_high: ${{ steps.sev.outputs.high }}
            sev_medium: ${{ steps.sev.outputs.medium }}
            drift_status: ${{ steps.drift.outputs.status }}
            drift_current: ${{ steps.drift_vals.outputs.current }}
            drift_previous: ${{ steps.drift_vals.outputs.previous }}
            policy_decision: ${{ steps.policy.outputs.decision }}
            policy_reason: ${{ steps.policy.outputs.reason }}
        steps:
            - uses: actions/checkout@v4

            - name: Build image (no push)
              run: docker build -f "${{ inputs.dockerfile || 'Dockerfile' }}" -t local-scan:latest "${{ inputs.context || '.' }}"

            - name: Install tools
              run: |
                  set -euo pipefail
                  curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin ${SYFT_VERSION}
                  curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sh -s -- -b /usr/local/bin ${GRYPE_VERSION}
                  curl -sSfL https://github.com/aquasecurity/trivy/releases/download/v${TRIVY_VERSION}/trivy_${TRIVY_VERSION}_Linux-64bit.tar.gz -o trivy.tgz
                  tar -xzf trivy.tgz trivy && sudo mv trivy /usr/local/bin/ && rm trivy.tgz
                  sudo apt-get update -y && sudo apt-get install -y jq

            - name: Generate SBOM (CycloneDX + SPDX)
              run: |
                  syft packages local:local-scan:latest -o cyclonedx-json > sbom.cdx.json
                  syft packages local:local-scan:latest -o spdx-json > sbom.spdx.json
                  sha256sum sbom.cdx.json > sbom.cdx.sha256 || shasum -a 256 sbom.cdx.json > sbom.cdx.sha256
                  sha256sum sbom.spdx.json > sbom.spdx.sha256 || shasum -a 256 sbom.spdx.json > sbom.spdx.sha256

            - name: Trivy scan
              run: trivy image --security-checks vuln --format sarif --output trivy.sarif local-scan:latest || true

            - name: Grype scan
              run: grype local-scan:latest -o sarif > grype.sarif || true

            - name: Upload SARIF (Trivy)
              uses: github/codeql-action/upload-sarif@v3
              if: always()
              with:
                  sarif_file: trivy.sarif

            - name: Upload SARIF (Grype)
              uses: github/codeql-action/upload-sarif@v3
              if: always()
              with:
                  sarif_file: grype.sarif

            - name: Compute severity counts
              id: sev
              run: |
                  set -e
                  crit=0; high=0; med=0
                  for f in trivy.sarif grype.sarif; do
                    [ -f "$f" ] || continue
                    c=$(jq '[.runs[].results[]? | (.properties["security-severity"] // "" | tonumber?) | select(.>=9)] | length' "$f" 2>/dev/null || echo 0)
                    h=$(jq '[.runs[].results[]? | (.properties["security-severity"] // "" | tonumber?) | select(.>=7 and .<9)] | length' "$f" 2>/dev/null || echo 0)
                    m=$(jq '[.runs[].results[]? | (.properties["security-severity"] // "" | tonumber?) | select(.>=4 and .<7)] | length' "$f" 2>/dev/null || echo 0)
                    crit=$((crit+c)); high=$((high+h)); med=$((med+m))
                  done
                  echo "critical=$crit" >> $GITHUB_OUTPUT
                  echo "high=$high" >> $GITHUB_OUTPUT
                  echo "medium=$med" >> $GITHUB_OUTPUT

            - name: Policy gate
              id: policy
              run: |
                  set -e
                  POLICY='${{ inputs.fail-on }}'
                  C=${{ steps.sev.outputs.critical || 0 }}
                  H=${{ steps.sev.outputs.high || 0 }}
                  M=${{ steps.sev.outputs.medium || 0 }}
                  COMB_HIGH=$((C+H))
                  COMB_ALL=$((C+H+M))
                  status="pass"; reason="no violations"
                  case "$POLICY" in
                    critical) [ "$C" -gt 0 ] && { status="fail"; reason="critical vulns"; };;
                    high) [ "$COMB_HIGH" -gt 0 ] && { status="fail"; reason="high/critical vulns"; };;
                    medium) [ "$COMB_ALL" -gt 0 ] && { status="fail"; reason="medium/high/critical vulns"; };;
                    any) [ "$COMB_HIGH" -gt 0 ] && { status="fail"; reason="any high or critical vulns"; };;
                    none) status="pass"; reason="policy none";;
                    *) status="fail"; reason="unknown policy";;
                  esac
                  echo "decision=$status" >> $GITHUB_OUTPUT
                  echo "reason=$reason" >> $GITHUB_OUTPUT
                  if [ "$status" = "fail" ]; then
                    echo "Failing due to policy ($reason)" >&2
                    exit 1
                  fi

            - name: SBOM digest & drift
              id: drift
              run: |
                  set -e
                  CUR=$(sha256sum sbom.cdx.json | awk '{print $1}')
                  API_URL="https://api.github.com/repos/${{ github.repository }}/actions/artifacts"
                  curl -sSL -H "Authorization: Bearer $GITHUB_TOKEN" -H "Accept: application/vnd.github+json" "$API_URL" | \
                    jq -r '.artifacts[]? | select(.name=="sbom-digest") | .archive_download_url' | head -n1 > prev_url.txt || true
                  STATUS="no_previous"
                  if [ -s prev_url.txt ]; then
                    url=$(cat prev_url.txt)
                    curl -sSL -H "Authorization: Bearer $GITHUB_TOKEN" -L "$url" -o prev.zip || true
                    mkdir -p prev && unzip -qo prev.zip -d prev || true
                    if [ -f prev/sbom-digest.txt ]; then
                      PREV=$(cat prev/sbom-digest.txt)
                      if [ -n "$PREV" ] && [ "$PREV" != "$CUR" ]; then
                        STATUS="changed"
                      elif [ -n "$PREV" ]; then
                        STATUS="unchanged"
                      fi
                    fi
                  fi
                  echo "$CUR" > sbom-digest.txt
                  echo "$STATUS" > sbom-drift-status.txt
                  echo "status=$STATUS" >> $GITHUB_OUTPUT

            - name: Upload SBOM digest artifact
              uses: actions/upload-artifact@v4
              with:
                  name: sbom-digest
                  path: |
                      sbom-digest.txt
                      sbom-drift-status.txt

            - name: Expose drift values
              if: steps.drift.outputs.status == 'changed'
              id: drift_vals
              run: |
                  cur=$(cat sbom-digest.txt)
                  echo "current=$cur" >> $GITHUB_OUTPUT
                  prev_file=$(ls prev/sbom-digest.txt 2>/dev/null || true)
                  if [ -f "$prev_file" ]; then
                    prev=$(cat "$prev_file")
                    echo "previous=$prev" >> $GITHUB_OUTPUT
                  fi

    notify:
        name: Drift Notification
        runs-on: ubuntu-latest
        needs: [scan]
        if: needs.scan.outputs.drift_status == 'changed' && inputs.notify-provider != 'none' && inputs.notify-webhook-url != ''
        steps:
            - name: Send drift notification (simple)
              run: |
                  set -e
                  echo "Drift detected for ${{ github.repository }}"
                  echo "Current SBOM digest: ${{ needs.scan.outputs.drift_current }}" >> message.txt
                  echo "Previous SBOM digest: ${{ needs.scan.outputs.drift_previous }}" >> message.txt
                  echo "Policy decision: ${{ needs.scan.outputs.policy_decision }} (${{ needs.scan.outputs.policy_reason }})" >> message.txt
                  echo "Sending to provider: ${{ inputs.notify-provider }}"
                  if [ "${{ inputs.notify-provider }}" = "webhook" ]; then
                    curl -sS -X POST -H 'Content-Type: application/json' -d "$(jq -n --arg m "$(cat message.txt)" '{text:$m}')" '${{ inputs.notify-webhook-url }}' || true
                  fi
                  echo "--- Notification Body ---"; cat message.txt

    summary:
        name: Summary
        runs-on: ubuntu-latest
        needs: [scan, notify]
        if: always()
        steps:
            - name: Write summary
              run: |
                  set -e
                  echo "# Container Security Lite Summary" > summary.md
                  echo "Policy: ${{ needs.scan.outputs.policy_decision }} (reason: ${{ needs.scan.outputs.policy_reason }})" >> summary.md
                  echo "Critical: ${{ needs.scan.outputs.sev_critical }}" >> summary.md
                  echo "High: ${{ needs.scan.outputs.sev_high }}" >> summary.md
                  echo "Medium: ${{ needs.scan.outputs.sev_medium }}" >> summary.md
                  echo "Drift Status: ${{ needs.scan.outputs.drift_status }}" >> summary.md
                  if [ "${{ needs.scan.outputs.drift_status }}" = "changed" ]; then
                    echo "Current SBOM Digest: ${{ needs.scan.outputs.drift_current }}" >> summary.md
                    echo "Previous SBOM Digest: ${{ needs.scan.outputs.drift_previous }}" >> summary.md
                  fi
                  cat summary.md >> $GITHUB_STEP_SUMMARY

# End of pristine minimal lite workflow.
