"""Utility to (re)generate the config/agents.yaml file with 81 agents.

Features:
 - Backs up existing agents.yaml (timestamped) before overwriting.
 - Preserves the first set of curated core agents if present.
 - Fills the remainder with deterministic placeholder agents up to target count.
 - Categorises placeholder agents across functional areas to look less uniform.
 - Emits a concise summary at the end (counts per category & total).

Usage (PowerShell):
  python scripts/generate_agents.py            # regenerate to 81 agents
  python scripts/generate_agents.py --count 90  # generate 90 instead

Idempotency:
 - Running multiple times keeps curated agents intact (matched by id) and
   regenerates placeholders only if below target count.
 - If curated ids collide with planned placeholder ids, placeholders skip.

Extension Points:
 - Add richer metadata (model, temperature, memory) inside the agent dicts.
 - Introduce weighting/priorities or capabilities expansion strategies.
"""

from __future__ import annotations

import argparse
import datetime as _dt
import sys
from collections import defaultdict
from pathlib import Path
from typing import Any

try:
    import yaml  # type: ignore
except ImportError:  # pragma: no cover - convenience message
    print("PyYAML not installed. Please add 'PyYAML' to dependencies.", file=sys.stderr)
    sys.exit(1)

ROOT = Path(__file__).resolve().parent.parent
CONFIG_DIR = ROOT / "config"
AGENTS_FILE = CONFIG_DIR / "agents.yaml"
BACKUP_DIR = CONFIG_DIR / "backups"

CURATED_CORE_IDS = {
    "code_architect",
    "ai_research",
    "biz_intel",
    "security_ops",
    "workflow_orchestrator",
    "data_quality",
    "prompt_engineer",
    "research_scout",
    "market_analyst",
    "integration_agent",
}

PLACEHOLDER_PREFIX = "generic_agent_"

CATEGORY_ROTATION = [
    ("auxiliary", ["capability_a", "capability_b"]),
    ("ops", ["log_analysis", "throughput_calc"]),
    ("data", ["profiling", "quality_checks"]),
    ("ai", ["prompt_refine", "guardrail_eval"]),
    ("research", ["paper_scan", "trend_summary"]),
    ("security", ["threat_model", "risk_flag"]),
    ("analytics", ["kpi_insight", "forecast_trial"]),
]


def load_existing() -> list[dict[str, Any]]:
    if not AGENTS_FILE.exists():
        return []
    with AGENTS_FILE.open("r", encoding="utf-8") as f:
        data = yaml.safe_load(f) or {}
    agents = data.get("agents", []) if isinstance(data, dict) else []
    # Normalize structure
    norm = []
    for a in agents:
        if not isinstance(a, dict):
            continue
        if "id" not in a:
            continue
        norm.append(a)
    return norm


def backup_file() -> Path | None:
    if not AGENTS_FILE.exists():
        return None
    BACKUP_DIR.mkdir(parents=True, exist_ok=True)
    ts = _dt.datetime.utcnow().strftime("%Y%m%d_%H%M%S")
    backup_path = BACKUP_DIR / f"agents_{ts}.yaml"
    backup_path.write_text(AGENTS_FILE.read_text(encoding="utf-8"), encoding="utf-8")
    return backup_path


def build_curated_map(existing: list[dict[str, Any]]) -> dict[str, dict[str, Any]]:
    curated: dict[str, dict[str, Any]] = {}
    for agent in existing:
        aid = agent.get("id")
        if aid in CURATED_CORE_IDS:
            curated[aid] = agent
    return curated


def generate_placeholders(
    start_index: int, needed: int, skip_ids: set[str]
) -> list[dict[str, Any]]:
    placeholders: list[dict[str, Any]] = []
    i = start_index
    cat_len = len(CATEGORY_ROTATION)
    while len(placeholders) < needed:
        cat, caps = CATEGORY_ROTATION[len(placeholders) % cat_len]
        agent_id = f"{PLACEHOLDER_PREFIX}{i}"
        if agent_id in skip_ids:
            i += 1
            continue
        placeholders.append(
            {
                "id": agent_id,
                "name": f"Generic Agent {i}",
                "category": cat,
                "description": f"Autogenerated placeholder agent number {i} in category {cat}",
                "capabilities": caps,
            }
        )
        i += 1
    return placeholders


def compose_agents(target_count: int) -> list[dict[str, Any]]:
    existing = load_existing()
    curated = build_curated_map(existing)

    # Keep any curated already present; if missing some curated, we can recreate minimal definitions.
    missing_curated = CURATED_CORE_IDS - set(curated.keys())
    if missing_curated:
        for aid in sorted(missing_curated):
            curated[aid] = {
                "id": aid,
                "name": aid.replace("_", " ").title(),
                "category": "core",
                "description": f"Restored curated core agent '{aid}'",
                "capabilities": ["core_function"],
            }

    set(curated.keys())
    # Determine existing placeholder style agents (prefixed) we may want to keep (to preserve numbering continuity)
    preserved_placeholders = [
        a
        for a in existing
        if isinstance(a, dict) and a.get("id", "").startswith(PLACEHOLDER_PREFIX)
    ]
    preserved_placeholders_sorted = sorted(
        preserved_placeholders,
        key=lambda a: (
            int(a["id"].split(PLACEHOLDER_PREFIX)[1])
            if a["id"].split(PLACEHOLDER_PREFIX)[1].isdigit()
            else 0
        ),
    )

    # Add curated first, then preserved placeholders
    final_agents: list[dict[str, Any]] = [curated[k] for k in sorted(curated.keys())]
    final_agents.extend(preserved_placeholders_sorted)

    # Fill up to target_count
    if len(final_agents) < target_count:
        # Choose a starting index greater than any existing numeric suffix
        max_suffix = 5  # we originally had 1..5
        for a in preserved_placeholders_sorted:
            try:
                suffix = int(a["id"].split(PLACEHOLDER_PREFIX)[1])
                if suffix > max_suffix:
                    max_suffix = suffix
            except Exception:
                pass
        start_index = max_suffix + 1
        needed = target_count - len(final_agents)
        skip_ids = {a["id"] for a in final_agents}
        final_agents.extend(generate_placeholders(start_index, needed, skip_ids))

    return final_agents[:target_count]


def write_agents(agents: list[dict[str, Any]]):
    CONFIG_DIR.mkdir(parents=True, exist_ok=True)
    payload = {"agents": agents}
    with AGENTS_FILE.open("w", encoding="utf-8") as f:
        yaml.safe_dump(payload, f, sort_keys=False, allow_unicode=True)


def summarize(agents: list[dict[str, Any]]):
    by_category = defaultdict(int)
    for a in agents:
        by_category[a.get("category", "uncategorized")] += 1
    print(f"Generated {len(agents)} agents.")
    for cat, cnt in sorted(by_category.items(), key=lambda x: (-x[1], x[0])):
        print(f"  {cat}: {cnt}")


def parse_args():
    parser = argparse.ArgumentParser(
        description="Generate agents.yaml with target number of agents"
    )
    parser.add_argument(
        "--count", type=int, default=81, help="Target number of agents (default 81)"
    )
    parser.add_argument(
        "--no-backup", action="store_true", help="Do not create a backup of existing file"
    )
    return parser.parse_args()


def main():
    args = parse_args()
    target = max(1, args.count)
    if not args.no_backup:
        backup_path = backup_file()
        if backup_path:
            print(f"Backup created: {backup_path.relative_to(ROOT)}")
    agents = compose_agents(target)
    write_agents(agents)
    summarize(agents)


if __name__ == "__main__":  # pragma: no cover
    try:
        main()
    except KeyboardInterrupt:
        print("Interrupted", file=sys.stderr)
        sys.exit(130)
